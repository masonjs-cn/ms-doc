import{_ as s,c as n,j as a,a as r,G as o,w as p,aP as l,B as c,o as d}from"./chunks/framework.CykvSdhI.js";const m="/ms-doc/architect/202410111047.png",h="/ms-doc/architect/202410111048.png",u="/ms-doc/architect/202410111049.png",g="/ms-doc/architect/202410111050.png",b="/ms-doc/architect/202410111051.png",f="/ms-doc/architect/202410111052.png",i="/ms-doc/architect/202410111053.png",x="/ms-doc/architect/202410111054.jpg",_="/ms-doc/architect/202410111055.png",q="/ms-doc/architect/202410111056.png",P="/ms-doc/architect/202410111057.png",C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"architect/index.md","filePath":"architect/index.md"}'),k={name:"architect/index.md"};function D(y,t,v,S,w,W){const e=c("font");return d(),n("div",null,[t[5]||(t[5]=a("h2",{id:"前世今生",tabindex:"-1"},[r("前世今生 "),a("a",{class:"header-anchor",href:"#前世今生","aria-label":'Permalink to "前世今生"'},"​")],-1)),t[6]||(t[6]=a("pre",null,[a("code",null,`该篇章主要讲述，我从业之后，对于低代码设计的一些经历见识，如果不感兴趣的可以直接跳过这个篇幅。
`)],-1)),t[7]||(t[7]=a("h3",{id:"前端初代-dw",tabindex:"-1"},[r("前端初代(DW) "),a("a",{class:"header-anchor",href:"#前端初代-dw","aria-label":'Permalink to "前端初代(DW)"'},"​")],-1)),a("p",null,[t[1]||(t[1]=r("第一代的网页时代，其实大家都不会陌生于，一个叫做")),o(e,{style:{color:"rgb(51, 51, 51)"}},{default:p(()=>t[0]||(t[0]=[r("Adobe Dreamweaver的软件，当然人们通常会叫它另一个名字“DW”。也有人会说，早期的前端，被叫做切图仔。")])),_:1})]),t[8]||(t[8]=a("p",null,[a("img",{src:m,alt:""})],-1)),a("p",null,[t[3]||(t[3]=r('不知道多少人会熟悉这个页面，我记得我学生时代，写的第一个页面，用的是微软的"')),o(e,{style:{color:"rgb(51, 51, 51)"}},{default:p(()=>t[2]||(t[2]=[r("Frontpage")])),_:1}),t[4]||(t[4]=r('"软件。使用很简单，你甚至不需要去写代码。我们通常使用一些网格化布局，然后找个设计好的图片，使用 ps 去切开，然后布局在网格中。'))]),t[9]||(t[9]=l('<p><img src="'+h+'" alt=""></p><p>我愿意成他为 1.0 的低代码时代，也是我梦开始的地方。相信很多人，一句代码都不会的时候，也用过这个类似的软件。那时候是不是通常做个门户网站，然后贴个鼠标特效呢。</p><p>这时候，我们来总结一下，这个软件有什么特点，和解决了什么痛点？你会发现，你不会写代码，你甚至不知道什么叫做 JavaScript，这和 Word 、ppt 类似，只要你足够的细心，你就能布局出一个老版的门户网站，它拥有工具栏，你可以给样式新增各种样式。当然后面我们知道，那个样式的名字叫做 CSS。</p><p>最早的时期，大家采用的是 Dw 这样的工具，那么为什么后面突然就不发展了？我的记忆中，后面前端界，进入了移动端时代，jQuery、html5、CSS3。响应式的时代，呼之欲出，不知道，你是否还记得那个经典的 Bootstrap时代。而也预示着，DW 这样的网格化布局的样式，被人们淘汰。人们开始更加追求页面的动画，页面中特效，页面的响应式。</p><h3 id="后端时代降临-phpmyadmin" tabindex="-1">后端时代降临 (phpMyAdmin) <a class="header-anchor" href="#后端时代降临-phpmyadmin" aria-label="Permalink to &quot;后端时代降临 (phpMyAdmin)&quot;">​</a></h3><p><img src="'+u+'" alt=""></p><p><img src="'+g+'" alt=""></p><p>其实低代码的发展，绝对不是只有前端最初的 DW 设计，同样你不需要学会写什么代码，你需要使用这个系统，他就能给你生成一些，简单的单表 mysql 设计。这时候，你稍微会一点后端语言，例如 php、java，你就可以写出一些接口，去操作数据。</p><h3 id="模板时代" tabindex="-1">模板时代 <a class="header-anchor" href="#模板时代" aria-label="Permalink to &quot;模板时代&quot;">​</a></h3><p>你现在已经了解，原来前端可以生成，后端sql也可以生成。 那么后端代码可以生成吗、前端代码呢？当你的思路打开后，你会发现，那你写一个模板，然后替换内部的内容不就好了。</p><p><img src="'+b+'" alt=""></p><p>可以通过一些模板，生成后端的语言/前端的语言，这样是不是就实现了基础的低代码。这个技术，广泛的运用在表单设计中。</p><h2 id="低代码设计器" tabindex="-1">低代码设计器 <a class="header-anchor" href="#低代码设计器" aria-label="Permalink to &quot;低代码设计器&quot;">​</a></h2><h3 id="表单设计器" tabindex="-1">表单设计器 <a class="header-anchor" href="#表单设计器" aria-label="Permalink to &quot;表单设计器&quot;">​</a></h3><p>阅读完上文后，你会发现，其实低代码最好运用，最容易运用的地方，其实就是表单设计器。通常业务代码，被人们戏称为 CURD (增删改查)嘛。这类数据，最广泛运用在后端的管理系统中，我们对基础数据需要有一些维护。</p><p><img src="'+f+'" alt=""></p><p>最常见的页面，就是这样的一个 curd 的表单、新增、删除的表单。这时候，我们通常需要一个表单设计器。</p><p><img src="'+i+'" alt=""></p><p>我们通过拖拉拽的方式，构建出一个表单，这时候，和后端结合，就可以写出 curd 的页面。</p><h3 id="流程设计器" tabindex="-1">流程设计器 <a class="header-anchor" href="#流程设计器" aria-label="Permalink to &quot;流程设计器&quot;">​</a></h3><p><img src="'+i+'" alt=""></p><p><img src="'+x+'" alt=""></p><p>通过表单设计的新增后，我们发现，很多内部的表单、流程、其实每次写死不大可能。比如说一个通用申请流程。你永远不知道下一个审批人会变更为谁，这时候你需要有一个设计器，可以填一些脚本，控制单据流程的流转。</p><h3 id="移动端设计器" tabindex="-1">移动端设计器 <a class="header-anchor" href="#移动端设计器" aria-label="Permalink to &quot;移动端设计器&quot;">​</a></h3><p><img src="'+_+'" alt=""></p><p>通过上述的表单设计，那么也可以诞生出，移动端设计，你可以是vue/react 的网页，当然也可以是 uni-app/taro。</p><h3 id="大屏设计器" tabindex="-1">大屏设计器 <a class="header-anchor" href="#大屏设计器" aria-label="Permalink to &quot;大屏设计器&quot;">​</a></h3><p><img src="'+q+'" alt=""></p><p><img src="'+P+'" alt=""></p><p>产生出数据之后，不论是运营、还是成果展示，和 echart 结合后，就会有一些大屏的需求。这时候大屏设计器的作用就体现出来。</p>',30))])}const N=s(k,[["render",D]]);export{C as __pageData,N as default};
