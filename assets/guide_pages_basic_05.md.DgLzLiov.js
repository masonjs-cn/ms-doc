import{_ as e,c as n,j as s,a as l,G as p,aP as t,B as h,o as k}from"./chunks/framework.h7-sJKmC.js";const b=JSON.parse('{"title":"构建工具","description":"","frontmatter":{},"headers":[],"relativePath":"guide/pages/basic/05.md","filePath":"guide/pages/basic/05.md"}'),r={name:"guide/pages/basic/05.md"};function E(d,i,o,c,g,u){const a=h("AD");return k(),n("div",null,[i[0]||(i[0]=s("h1",{id:"构建工具",tabindex:"-1"},[l("构建工具 "),s("a",{class:"header-anchor",href:"#构建工具","aria-label":'Permalink to "构建工具"'},"​")],-1)),i[1]||(i[1]=s("p",null,"构建工具就是指能自动对代码执行检验、转换、压缩等功能的工具。从目前市场上流行的构建工具来看，常见的功能有：",-1)),i[2]||(i[2]=s("ol",null,[s("li",null,"代码转换，例如将 ts 文件转换为 js 文件。"),s("li",null,"代码打包，将有关联的代码打包在一起。"),s("li",null,"代码压缩、文件压缩、gzip 压缩等。"),s("li",null,"热加载，修改代码后自动刷新页面。"),s("li",null,"代码检验，检查代码格式是否符合规范。 ...")],-1)),p(a),i[3]||(i[3]=t(`<p>在开发中使用构建工具，能够大大的提升了开发效率。</p><p>由于前端构建工具比较多，所以本章选取了其中的三个 <a href="https://webpack.docschina.org/concepts/" target="_blank" rel="noreferrer">webpack</a>、<a href="https://www.rollupjs.com/" target="_blank" rel="noreferrer">rollup</a>、<a href="https://github.com/vitejs/vite" target="_blank" rel="noreferrer">vite</a> 来进行讲解。</p><h2 id="webpack" tabindex="-1">webpack <a class="header-anchor" href="#webpack" aria-label="Permalink to &quot;webpack&quot;">​</a></h2><p>webpack 是目前最火的构建工具，它具有非常多的实用功能：</p><ol><li>热加载：开发环境下修改代码，页面实时刷新。</li><li>按需加载：每次打开页面时，只加载当前页面所需要的资源。在切换到其他页面时，再加载对应的资源。</li><li>代码打包：打包、压缩、分割代码等等。</li><li><a href="https://webpack.docschina.org/guides/tree-shaking/" target="_blank" rel="noreferrer">tree-shaking</a>：打包过程中自动剔除没有使用的代码。</li><li>可以通过 loader 和 plugin 处理各种各样的资源依赖。</li></ol><p>下面让我们简单的了解一下 webpack 的 <a href="https://www.webpackjs.com/contribute/writing-a-loader/" target="_blank" rel="noreferrer">loader</a>、 <a href="https://www.webpackjs.com/contribute/writing-a-plugin/" target="_blank" rel="noreferrer">plugin</a> 和自定义模块加载系统。</p><h3 id="loader" tabindex="-1">loader <a class="header-anchor" href="#loader" aria-label="Permalink to &quot;loader&quot;">​</a></h3><p>什么是 loader？它是一个转换器，用于对源代码进行转换。例如使用 <code>babel-loader</code> 可以将 ES6 代码转换为 ES5 代码；<code>sass-loader</code> 将 sass 代码转换为 css 代码。</p><p>其实 loader 并不复杂，很容易就能写一个 loader。下面就是一个简单的 loader，它的作用是将代码中的 <code>var</code> 关键词替换为 <code>const</code>：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">source</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> source.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">var</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;const&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// var a = 1; 将被转换为 const a = 1;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="plugin" tabindex="-1">plugin <a class="header-anchor" href="#plugin" aria-label="Permalink to &quot;plugin&quot;">​</a></h3><p>webpack 在整个编译周期中会触发很多不同的事件，plugin 可以监听这些事件，并且可以调用 webpack 的 API 对输出资源进行处理。</p><p>这是它和 loader 的不同之处，loader 一般只能对源文件代码进行转换，而 plugin 可以做得更多。plugin 在整个编译周期中都可以被调用，只要监听事件。</p><p>例如 <code>html-webpack-plugin</code> 插件在编译完成后自动的将资源 URL 插入到 html 文件。</p><h3 id="自定义模块系统" tabindex="-1">自定义模块系统 <a class="header-anchor" href="#自定义模块系统" aria-label="Permalink to &quot;自定义模块系统&quot;">​</a></h3><p>在 webpack 里，每一个文件都是一个模块。</p><p>无论你开发使用的是 CommonJS 规范还是 ES6 模块规范，打包后的文件都统一使用 webpack 自定义的模块规范来管理、加载模块。</p><h3 id="如何学习-webpack" tabindex="-1">如何学习 webpack <a class="header-anchor" href="#如何学习-webpack" aria-label="Permalink to &quot;如何学习 webpack&quot;">​</a></h3><p>在 webpack 中我认为比较值得学习的是以下 4 项：</p><ol><li>写一个 loader 和 plugin，了解 webpack 是如何通过 loader 和 plugin 处理文件的(<a href="https://juejin.cn/post/6871239792558866440" target="_blank" rel="noreferrer">《实现一个 webpack loader 和 webpack plugin》</a>)。</li><li>学习 webpack 的模块加载原理，知道它是怎么加载文件的，知道按需加载的原理是什么(<a href="https://juejin.cn/post/6872354325553741838" target="_blank" rel="noreferrer">《深入了解 webpack 模块加载原理》</a>)。</li><li>学习如何用 webpack 做性能优化（<a href="https://juejin.cn/post/6844903651291447309" target="_blank" rel="noreferrer">《三十分钟掌握Webpack性能优化》</a>）。</li><li>学习 webpack 的热加载原理（<a href="https://juejin.cn/post/6844903933157048333" target="_blank" rel="noreferrer">《搞懂webpack热更新原理》</a>）。</li></ol><p>以上 4 项学会了，基本上 webpack 就掌握得差不多了。不管是在工作中，还是面试中，遇到 webpack 的问题都能轻松解决。</p><h2 id="rollup" tabindex="-1">rollup <a class="header-anchor" href="#rollup" aria-label="Permalink to &quot;rollup&quot;">​</a></h2><p>相比于 webpack，它没有热加载，也没有按需加载等非常实用的功能。但 rollup 依然能得到广大开发者的喜爱，依靠的就是它的打包功能。</p><p>rollup 打包功能为什么这么优秀？主要有以下两个原因：</p><ol><li>对于使用原生 ESM 模块编写的代码，rollup 会静态分析代码中的 import，并将排除任何未实际使用的代码。</li><li>支持程序流分析，能更加正确的判断项目本身的代码是否有副作用（配合 tree-shaking）。</li></ol><p>从 webpack 提供的 <a href="https://webpack.docschina.org/guides/tree-shaking/" target="_blank" rel="noreferrer">tree-shaking</a> 官方 DEMO，也能看出 webpack 的 tree-shaking 并不完美：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// math.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> square</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> cube</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// main.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { cube } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./math.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> element</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;pre&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    element.innerHTML </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;Hello webpack!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;5 cubed is equal to &#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> cube</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> element;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.body.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span></code></pre></div><p>打包后的代码：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 1 */</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/***/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">__webpack_exports__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">__webpack_require__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;use strict&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* unused harmony export square */</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* harmony export (immutable) */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __webpack_exports__[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cube;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> square</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> cube</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>可以看到没有使用的 <code>square()</code> 函数也打包进来了。对于这一点，webpack 的解释如下：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d9904a02a64f705d78a6b769eb606f79.png" alt=""></p><p>rollup 就不会有这种问题，它基于原生 ESM 模块，在编译时就能分析出哪些是没有使用的代码（webpack 还要额外配置）。所以 rollup 打包出来的代码非常干净。</p><p>另外 webpack 打包还需要注入自己的模块加载系统，所以还会有一部分“多余”的代码，不够干净。</p><h3 id="如何学习-rollup" tabindex="-1">如何学习 rollup <a class="header-anchor" href="#如何学习-rollup" aria-label="Permalink to &quot;如何学习 rollup&quot;">​</a></h3><p>我建议学习一下 rollup 是如何打包的，也就是它是怎么做到 tree-shaking 的。这一点建议看一下我的文章<a href="https://juejin.cn/post/6898865993289105415" target="_blank" rel="noreferrer">《从 rollup 初版源码学习打包原理》</a>。</p><h2 id="vite" tabindex="-1">vite <a class="header-anchor" href="#vite" aria-label="Permalink to &quot;vite&quot;">​</a></h2><p>vite 是一个最近兴起的构建工具，它的作者是 vue 之父尤雨溪。vite 对标的构建工具是 webpack，基本上 webpack 有的功能它都有。vite 和 webpack 的不同点主要有以下两点：</p><ol><li>开发环境下，使用原生 ESM 模块进行开发。同时拦截资源请求，根据请求找到对应的文件，作少许改动后返回代码。因此无需进行打包，直接按需编译，启动非常快。相比之下，webpack 的热加载在每次更改代码时都需要重新打包所有代码才能刷新页面，特别是代码很多时，打包非常缓慢。</li><li>生产环境下使用 rollup 打包。</li></ol><h3 id="如何学习-vite" tabindex="-1">如何学习 vite <a class="header-anchor" href="#如何学习-vite" aria-label="Permalink to &quot;如何学习 vite&quot;">​</a></h3><p>建议了解一下 vite 的按需编译是怎么做的。</p><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h2><p>从构建工具的发展历史来看，使用原生 ESM 模块是大势所趋，未来所有的构建工具都会基于 ESM 设计。如果你还不熟悉 ESM 模块，建议看一下阮一峰老师的<a href="https://es6.ruanyifeng.com/#docs/module" target="_blank" rel="noreferrer">《Module 的语法》</a>，或者看一下<a href="https://book.douban.com/subject/35175321/?from=tag" target="_blank" rel="noreferrer">《JavaScript高级程序设计（第4版）》</a>的《模块》一章。</p><h3 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h3><ul><li><a href="https://webpack.docschina.org/concepts/" target="_blank" rel="noreferrer">webpack</a></li><li><a href="https://www.rollupjs.com/" target="_blank" rel="noreferrer">rollup</a></li><li><a href="https://github.com/vitejs/vite" target="_blank" rel="noreferrer">vite</a></li><li><a href="https://juejin.cn/post/6898865993289105415" target="_blank" rel="noreferrer">从 rollup 初版源码学习打包原理</a></li><li><a href="https://juejin.cn/post/6871239792558866440" target="_blank" rel="noreferrer">实现一个 webpack loader 和 webpack plugin</a></li><li><a href="https://juejin.cn/post/6872354325553741838" target="_blank" rel="noreferrer">深入了解 webpack 模块加载原理</a></li><li><a href="https://juejin.cn/post/6844903651291447309" target="_blank" rel="noreferrer">三十分钟掌握Webpack性能优化</a></li><li><a href="https://juejin.cn/post/6844903933157048333" target="_blank" rel="noreferrer">搞懂webpack热更新原理</a></li></ul>`,44))])}const F=e(r,[["render",E]]);export{b as __pageData,F as default};
