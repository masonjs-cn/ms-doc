import{_ as s,c as i,aP as e,o as t}from"./chunks/framework.UKNQUgmq.js";const c=JSON.parse('{"title":"基础规范","description":"","frontmatter":{},"headers":[],"relativePath":"guide/pages/react/README.md","filePath":"guide/pages/react/README.md"}'),l={name:"guide/pages/react/README.md"};function n(h,a,p,r,k,d){return t(),i("div",null,a[0]||(a[0]=[e(`<h1 id="基础规范" tabindex="-1">基础规范 <a class="header-anchor" href="#基础规范" aria-label="Permalink to &quot;基础规范&quot;">​</a></h1><p>随着 React Hook 的出现，社区的各个库也开始积极拥抱 Hook；项目采用<code>React Hook</code>方式进行开发。</p><h3 id="项目结构" tabindex="-1">项目结构 <a class="header-anchor" href="#项目结构" aria-label="Permalink to &quot;项目结构&quot;">​</a></h3><h3 id="编码规范" tabindex="-1">编码规范 <a class="header-anchor" href="#编码规范" aria-label="Permalink to &quot;编码规范&quot;">​</a></h3><h4 id="_1-基础规范" tabindex="-1">1. 基础规范 <a class="header-anchor" href="#_1-基础规范" aria-label="Permalink to &quot;1. 基础规范&quot;">​</a></h4><ul><li><p>每个文件只包含一个 React 组件</p></li><li><p>采用 jsx 语法</p></li></ul><h4 id="_2-命名规范" tabindex="-1">2. 命名规范 <a class="header-anchor" href="#_2-命名规范" aria-label="Permalink to &quot;2. 命名规范&quot;">​</a></h4><ul><li>单独文件组件，使用大驼峰的方式命名 <code>NavBar.tsx</code></li><li>目录组件，目录命名使用大驼峰方式</li></ul><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NavBar</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> index.tsx</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> index.less</span></span></code></pre></div><h4 id="_3-引号" tabindex="-1">3. 引号 <a class="header-anchor" href="#_3-引号" aria-label="Permalink to &quot;3. 引号&quot;">​</a></h4><p>JSX 属性使用单引号，与普通 JS 保持一致</p><p>推荐：</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Card</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{{ width: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;100%&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }} /&gt;</span></span></code></pre></div><h4 id="_4-属性" tabindex="-1">4. 属性 <a class="header-anchor" href="#_4-属性" aria-label="Permalink to &quot;4. 属性&quot;">​</a></h4><ul><li>所有属性命名使用小驼峰方式</li></ul><h4 id="_5-圆括号" tabindex="-1">5. 圆括号 <a class="header-anchor" href="#_5-圆括号" aria-label="Permalink to &quot;5. 圆括号&quot;">​</a></h4><ul><li>JSX 标签超过一行，请使用圆括号包裹</li></ul><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserDetail</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ParentComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ChildComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ParentComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="_6-标签" tabindex="-1">6. 标签 <a class="header-anchor" href="#_6-标签" aria-label="Permalink to &quot;6. 标签&quot;">​</a></h4><ul><li>没有子元素的标签请闭合</li></ul><h3 id="react-hooks-项目规范" tabindex="-1">React Hooks 项目规范 <a class="header-anchor" href="#react-hooks-项目规范" aria-label="Permalink to &quot;React Hooks 项目规范&quot;">​</a></h3><ul><li>统一使用函数组件</li><li>组件内部的状态统一使用 <code>hooks</code> 处理，业务数据统一放在 redux 中管理</li><li>请求和数据处理统一放置 actions</li><li>容器组件都有自己独立的 reducer</li><li>Hooks 的方法统一放在最前面</li></ul>`,22)]))}const E=s(l,[["render",n]]);export{c as __pageData,E as default};
